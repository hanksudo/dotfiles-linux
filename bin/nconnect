#!/bin/sh
# -*- tcl -*- \
exec expect -f "$0" "$@"


set DefaultUser root
set DefaultPort 22
set timeout 120


proc usage {arg} {
  global argv0 DefaultUser DefaultPort
  if {$arg != ""} {
    puts "error: ${arg}"
  }
  puts "usage: ${argv0} {--verbose} {--login=user} host{:port}"
  puts "       default user = ${DefaultUser}"
  puts "       default port = ${DefaultPort}"
  exit 1
}

if {[llength $argv] <= 0} {
  usage "missing arguments"
}


proc SendInteractText {spawn_id} {
  interact {
    -re "\[\[:print:\]\]" {
      exp_send $interact_out(0,string)
    }
    "\r" {
      exp_send "\r"
      return
    }
    "\n" {
      exp_send "\n"
      return
    }
    -re "." {
      send_user "\007"
    }
  }
}



# assumes the command will execute non-interactively
proc probe {user host port} {

  spawn ssh -l $user -p $port $host

  set rc 0
  set ErrorList {}

  expect {
    -re {Offending[[:space:]]+.*in[[:space:]]+([^:]+):([[:digit:]]+)} {
      lappend ErrorList [list $expect_out(1,string) $expect_out(2,string)]
      exp_continue
    }
    "Are you sure you want to continue connecting (yes/no)?" {
      exp_send "yes\r"
      exp_continue
    }
    "Please type 'yes' or 'no':" {
      exp_send "yes\r"
      exp_continue
    }
    -re {[pP]assword:} {
      interact
      set rc 1
    }
    "Permission denied (publickey,keyboard-interactive)." {
      puts "Terminating"
    }
    -re "(No route to host|hostname nor servname provided, or not known|Host key verification failed)" {
      send_user "\nTerminating\r\n"
      puts "Failed to connect to: ${host}:${port}"
    }
  }

  catch {
    close
  } ErrorMessage
  
  set TheFile ""
  set ns {}
  foreach item $ErrorList {
    foreach {f n} $item {
      if {$TheFile == ""} {
        set TheFile $f
      } elseif {$TheFile != $f} {
        usage "mismatched files: ${f} and ${TheFile}"
      }
      lappend ns $n
    }
  }

  set sed ""
  foreach n [lsort -integer -increasing $ns] {
    set sed "${sed}${n}d;"
  }
  if {$sed != ""} {
    exec sed -i $sed $TheFile
  }
  return $rc
}

proc PromptPassword {prompt} {
  set timeout 120
  stty -echo
  if {$prompt != ""} {
    send_user $prompt
  }
# timeout ????
  expect_user -re "(.*)\n"
  set password $expect_out(1,string)
  stty echo
  send_user "\r\n"
  return $password
}


# Main Program
# ============

set verbose 0
set host ""
set user $DefaultUser
set port $DefaultPort

set i 0
set arg [lindex $argv $i]
while {$arg != ""} {
  switch -regexp -- $arg {
    "^--verbose" {
      set verbose 1
    }
    "^-v$" {
      set verbose 1
    }
    "^--login=.+" {
      set pos [string first "=" $arg]
      set user [string range $arg [expr $pos + 1] end]
    }
    "^--user=.+" {
      set pos [string first "=" $arg]
      set user [string range $arg [expr $pos + 1] end]
    }
    "^[^:]+$" {
      set host $arg
      set port $DefaultPort
    }
    "^[^:]+:[^:]+$" {
      set pos [string first ":" $arg]
      set host [string range $arg 0 [expr $pos - 1]]
      set port [string range $arg [expr $pos + 1] end]
    }
    default {
      usage "Invalid argument $arg"
    }
  }
  incr i
  set arg [lindex $argv $i]
}

if {$user == ""} {
  usage "--login is not set"
}

if {$port == ""} {
  usage "port is not specified"
}

if {$host == ""} {
  usage "no host given"
}



while {[probe $user $host $port] == 0} {
  send_user "retry\r\n"
}
