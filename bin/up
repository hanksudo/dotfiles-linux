#!/bin/sh

ERROR()
{
  echo error: $*
  exit 1
}

USAGE()
{
  [ -z "$1" ] || echo error: $*
  echo usage: $(basename "$0") '<options>'
  echo '       --help           -h         this message'
  echo '       --verbose        -v         more messages'
  echo '       --yes            -y         answer yes to all prompts'
  echo '       --no-update      -n         no update before a purge'
  echo '       --no-purge       -p         do not purge old configs'
  echo '       --use-apt-get    -a         use apt-get instead of aptitude'
  exit 1
}


verbose=no
update=yes
purge=yes
prompt=yes
debug=no

if [ -z "$(which aptitude)" ]
then
  use_apt_get=yes
else
  use_apt_get=no
fi

# decode options
getopt=/usr/local/bin/getopt
[ -x "${getopt}" ] || getopt=getopt
args=$(${getopt} -o hvynpa --long=help,verbose,yes,no-update,no-purge,use-apt-get,debug -- "$@") ||exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    -v|--verbose)
      verbose=yes
      shift
      ;;

    -y|--yes)
      prompt=no
      shift
      ;;

    -n|--no-update)
      update=no
      shift
      ;;

    -p|--no-purge)
      purge=no
      shift
      ;;

    -a|--use-apt-get)
      use_apt_get=yes
      shift
      ;;

    --debug)
      debug=yes
      shift
      ;;

    --)
      shift
      break
      ;;

    -h|--help)
      USAGE
      ;;

    *)
      USAGE invalid option: $1
      ;;
  esac
done

# verify arguments
[ -z "${prompt}" ] && USAGE prompt is not set
[ -z "${purge}" ] && USAGE purge is not set
[ -z "${update}" ] && USAGE update is not set
[ -z "${use_apt_get}" ] && USAGE use_apt_get is not set
[ $# -ne 0 ] && USAGE extraneous extra arguments


main()
{
  case "${use_apt_get}" in
    [yY]|[yY][eE][sS])
      cmd=apt-get
      cmd_list='update upgrade dist-upgrade autoclean autoremove'
      ;;
    *)
      cmd=aptitude
      cmd_list='update safe-upgrade full-upgrade autoclean'
      ;;
  esac
  case "${prompt}" in
    [nN]|[nN][oO])
      apt_opts='-y'
      ;;
    *)
      apt_opts=''
      ;;
  esac
  case "${update}" in
    [yY]|[yY][eE][sS])
      for op in ${cmd_list}
      do
        echo '===>' ${cmd} ${apt_opts} ${op}
        ${cmd} ${apt_opts} "${op}"
      done
  esac
  case "${purge}" in
    [yY]|[yY][eE][sS])
      echo '===>' Purging obsolete configuration files
      items=$(dpkg-query -l |awk '/^rc/{print $2}')
      [ -n "${items}" ] && dpkg -P ${items}
      ;;
    *)
      ;;
  esac
}


if [ X"root" = X"$(whoami)" ]
then
  main "$@"
  exit 0
fi

if [ -z "${SUDO_UID}" -o -z "${SUDO_GID}" ]
then
  echo re-run with sudo
  sudo -K
  exec sudo "$0" ${args}
  exit 1
fi

if [ -n "${SUDO_UID}" -a -n "${SUDO_GID}" ]
then
  main "$@"
else
  echo sudo failed
fi
